#by Dzhuzo365
import asyncio, openai
import os, random


from aiogram import types, Router, F, Bot
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command, or_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.types import ReplyKeyboardRemove


from mainFile.database.models import Photo, Video
from mainFile.database.orm_query import (
    orm_get_games,
    orm_get_game,

    orm_get_end_new,
    orm_get_previous_new,
    orm_get_next_new, orm_count_news,
)
from mainFile.filters.chat_types import ChatTypes
from mainFile.ChatGPT.gpt import gpt

from mainFile.keyboards.inline import get_callback_btns, get_url_btns
from mainFile.keyboards.reply import get_keyboard
bot=Bot(token=os.getenv('TOKEN'),parse_mode=ParseMode.HTML)

home_kb = get_keyboard(
    '–ù–æ–≤–æ—Å—Ç–∏',
    '–ò–≥—Ä—ã',
    '–î–æ–Ω–∞—Ç–∏–∫',
    '–°–•–†–û–ù',
    placeholder='—è –±—É–¥—É —Ç–µ–±—è –∂–¥–∞—Ç—å...',
    sizes=(2, 1, 1),
)

user_router = Router()
user_router.message.filter(ChatTypes(['private']))
count_list = 0


# @user_router.message(F.photo)
# async def first_cmd(message: types.Message):
#     file_id = message.photo[-1].file_id
#     await message.answer(file_id)

@user_router.message(Command('cmd'))
async def cmd(message: types.Message):
    await message.delete()
    await message.answer('–ê –≤–æ—Ç –∏ –æ–Ω–∏‚ò∫Ô∏èüçÄ', reply_markup=home_kb)

# @user_router.message(F.video)
# async def first_cmd(message: types.Message):
#     file_id = message.video.file_id
#     await message.answer(file_id)

#–≠–¢–û –î–û–õ–ñ–ù–û –ë–´–¢–¨ ANSWER_VIDEO –° –û–ë–£–ß–ê–õ–ö–û1
@user_router.message(CommandStart())
async def start(message: types.Message, state: FSMContext):
    await message.answer_video(video=os.getenv('start_hello'),caption='–ü—Ä–∏–≤–µ—Ç–∏–∫, —è –ú–∏—èü§ó –æ–¥–Ω–∞ –∏–∑ —É—á–∞—Å—Ç–Ω–∏—Ü —Å—Ç–µ—Å–Ω—è—à–µ–∫,\n'
                         '–î–∞–≤–∞–π –ø–æ–≤–µ—Å–µ–ª–∏–º—Å—è‚ù§Ô∏è\n'
                         '<tg-spoiler>–Ω–µ –∑–Ω–∞–µ—à—å —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å? –ø–∏—à–∏ /help</tg-spoiler>',
                         reply_markup = home_kb)
    await state.clear()



#=======================================================================================================================
class Scroll_News(StatesGroup):
    first_nw = State()
    other_nw = State()

# @user_router.message(Command('about'))
@user_router.message(F.text.lower().contains('–Ω–æ–≤–æ'))
async def about_cmd(message: types.Message, session: AsyncSession):
    count = await orm_count_news(session)
    if count:
        await message.answer('–•–º, —Å–∫—É—á–Ω–æ,  –Ω–∏—á–µ–≥–æ –Ω–æ–≤–æ–≥–æ, –º–æ–∂–µ—Ç –ª—É—á—à–µ –≤ <a href="https://t.me/mysweetmiya">–ª–æ–≥–æ–≤–æ</a> –∑–∞–≥–ª—è–Ω—É—Ç—å?')
    else:
        for new in await orm_get_end_new(session):
            await message.answer_photo(
                new.image,
                caption=f"<i><strong>{new.title}\
                                </strong></i>\n{new.news}\n{new.food}",reply_markup=get_callback_btns(btns={
                    '–ù–∞ –±–∞–∑—É':'base',
                    '–î–∞–ª—å—à–µ':f'attack_{new.id}'
                }
                ))

@user_router.callback_query(F.data.startswith('attack'))
async def atk_nws(callback: types.CallbackQuery, session: AsyncSession):
    news_id = int(callback.data.split('_')[-1])
    news_update = await orm_get_previous_new(session,news_id)
    if news_update:
        await callback.answer()
        title = f"<b>{news_update.title}</b>"
        caption = '\n'.join([title, news_update.news, news_update.food])
        media = types.InputMediaPhoto(media=news_update.image, caption= caption)
        await callback.message.edit_media(media=media, reply_markup=get_callback_btns(btns={
            '–ù–∞–∑–∞–¥':f'homing_{news_update.id}',
            '–î–∞–ª—å—à–µ': f'attack_{news_update.id}',
            '–ù–∞ –±–∞–∑—É': 'base',


            }
        ))
    else:
        await callback.answer("–∞ –≤—Å–µ, –∫–æ–Ω–µ—Ü")
        return



@user_router.callback_query(F.data.startswith('homing'))
async def home_nws(callback: types.CallbackQuery, session: AsyncSession):
    news_id = int(callback.data.split('_')[-1])
    news_update = await orm_get_next_new(session, news_id)
    if news_update == None:
        await callback.answer('–≠—Ç–æ –Ω–æ–≤–µ–π—à–µ–µ')
        return


    if news_update:
        await callback.answer()
        title = f"<b>{news_update.title}</b>"
        caption = '\n'.join([title, news_update.news, news_update.food])
        media = types.InputMediaPhoto(media=news_update.image, caption=caption)
        await callback.message.edit_media(media=media, reply_markup=get_callback_btns(btns={
            '–ù–∞–∑–∞–¥': f'homing_{news_update.id}',
            '–î–∞–ª—å—à–µ': f'attack_{news_update.id}',
            '–ù–∞ –±–∞–∑—É': 'base',

        }
        ))




@user_router.callback_query(F.data.startswith('base'))
async def base_nws(callback: types.CallbackQuery, session: AsyncSession):
    await callback.answer()
    media = types.InputMediaVideo(media=os.getenv('news_home'),caption="–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–∞—Ö—É–π –∏—Ö, –Ω–∞ —á–µ–º —Ç–µ–ø–µ—Ä—å –∑–∞–ª–∏–ø–Ω–µ–º? –∫—Å—Ç–∞, –∫–∞–∫ —Ç–µ–±–µ?üëÜüòÆ‚Äçüí®")
    await callback.message.edit_media(media=media)
# –∫–æ—Ä–æ—á–µ –ø—Ä–æ–±–ª–µ–º–∞ –≤ —Ç–æ–º —á—Ç–æ os.getenv  —á—Ç–æ—Ç–æ –Ω–µ –æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç —Ñ–æ—Ç–∫—É –ø–æ–º–µ–Ω—è—Ç—å
#=======================================================================================================================


class UserGame(StatesGroup):
    START = State()
    preSTART = State()


    text = {
        'UserGame:START':'–ï—Å—Ç—å –∏–≥—Ä—É—à–∫–∏ –∏ –ø–æ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ‚ù§Ô∏è'
    }

    last_message_id = None



@user_router.message(or_f(UserGame.START,UserGame.preSTART), F.text == '–ù–ê–ï..–ò–ì–†–ê–õ–°–Ø')
async def end_game(message: types.Message,  state: FSMContext):
    global last_message_id
    if last_message_id:
        await bot.delete_message(message.chat.id, last_message_id)
        last_message_id = None
    await state.clear()
    await message.answer('–•–≤–∞—Ç–∏—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏–≥—Ä—É—à–µ–∫..ü•±ü§Ø', reply_markup=home_kb)



# @user_router.message(Command('tired'))
@user_router.message(F.text.lower().contains('–∏–≥—Ä—ã'))
async def tired_cmd(message: types.Message, session: AsyncSession, state: FSMContext):
    await message.answer('–†–µ—à–∏–ª –ø–æ–∏–≥—Ä–∞—Ç—å? –¢–æ–≥–¥–∞ –≤–æ—Çüëá‚ù§Ô∏è',reply_markup =ReplyKeyboardRemove())
    play_list = await orm_get_games(session)
    btns = {game.name: f'category_{game.id}' for game in play_list}
    await message.answer_photo(photo=os.getenv('game_home'), caption='<b>–í–∏–¥—ã —Ä–æ–ª–µ–≤—ã—Ö –∏–≥—Ä—É—à–µ–∫ü•µüî•:</b>',reply_markup=get_callback_btns(btns=btns,
                                                                                sizes=(1,)))
    await state.set_state(UserGame.START)

@user_router.callback_query(UserGame.START)
async def start_game(callback: types.CallbackQuery, session: AsyncSession, state: FSMContext):
    global last_message_id
    await  callback.answer()
    game_id = callback.data.split("_")[-1]
    game = await orm_get_game(session, int(game_id))
    name = f"<b>{game.name}</b>"
    caption = '\n'.join([name, game.description,])
    media = types.InputMediaPhoto(media=game.image, caption=caption)
    await callback.message.edit_media(media=media, reply_markup=get_callback_btns(btns={
                 '–ù–∞–∑–∞–¥':'back',
                 '–ò–≥—Ä–∞—Ç—å':'play'
            }))
    last_message = await callback.message.answer('–ö—Å—Ç–∞—Ç–∏, –µ—â–µ –±–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É –º–æ–∏—Ö <a href="https://t.me/+V4Z9-kpFWpliYzk6">–ø–æ–¥—Ä—É–∂–µ–∫</a>',
                                  reply_markup=get_keyboard('–ù–ê–ï..–ò–ì–†–ê–õ–°–Ø'))
    last_message_id = last_message.message_id
    await state.set_state(UserGame.preSTART)




# btns = {food.classification: f'category_{food.id}' for food in food_list}

@user_router.callback_query(UserGame.preSTART,F.data.startswith('play'))
async def restart_game(callback: types.CallbackQuery,):
    await callback.answer()
    global last_message_id
    await bot.delete_message(callback.message.chat.id, last_message_id)
    last_message_id = None
    await callback.message.edit_caption(caption='–í –†–ê–ó–†–ê–ë–û–¢–ö–ï, –ú–û–ó–ì–£ –ù–ï –ï–ë–ò –°–ú–û–¢–†–ò –°–•–†–û–ù',
                                        reply_markup=get_callback_btns(btns={
                                         '–ö –∏–≥—Ä–∞–º':'list_games',
                                         '–≤—ã—Ö–æ–¥':'exit'}))



@user_router.callback_query(UserGame.preSTART,F.data.startswith('back'))
async def back_game(callback: types.CallbackQuery,session:AsyncSession,  state: FSMContext) -> None:
    global last_message_id
    await bot.delete_message(callback.message.chat.id, last_message_id)
    last_message_id = None
    current_state = await state.get_state()
    previous = None
    play_list = await orm_get_games(session)
    btns = {game.name: f'category_{game.id}' for game in play_list}
    for step in UserGame.__all_states__:
        if step.state == current_state:
            await state.set_state(previous)
            media = types.InputMediaPhoto(media=os.getenv('game_home'), caption=f"{UserGame.text[previous.state]}")
            await callback.message.edit_media(media=media,
                                          reply_markup=get_callback_btns(btns=btns,
                                                                                sizes=(1,)))
            return
        previous = step
    await callback.answer()



@user_router.callback_query(UserGame.preSTART,F.data.startswith('list_games'))
async def list_game(callback: types.CallbackQuery,session:AsyncSession,  state: FSMContext):
    await callback.answer()
    play_list = await orm_get_games(session)
    btns = {game.name: f'category_{game.id}' for game in play_list}
    media=types.InputMediaPhoto(media=os.getenv('game_home'), caption='<b>–í–∏–¥—ã –∏–≥—Ä—É—à–µ–∫ü•µüî•:</b>', reply_markup=get_keyboard('–ù–ê–ï..–ò–ì–†–ê–õ–°–Ø'))
    await callback.message.edit_media(media=media,
                               reply_markup=get_callback_btns(btns=btns,
                                                              sizes=(1,)))
    await state.set_state(UserGame.START)

@user_router.callback_query(UserGame.preSTART,F.data.startswith('exit'))
async def exit_game(callback: types.CallbackQuery,  state: FSMContext):
    await callback.answer()
    media = types.InputMediaVideo(media=os.getenv('afk2'),
                                  caption="–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–∞—Ö—É–π –∏—Ö, –Ω–∞ —á–µ–º —Ç–µ–ø–µ—Ä—å –∑–∞–ª–∏–ø–Ω–µ–º? –∫—Å—Ç–∞, –∫–∞–∫ —Ç–µ–±–µ?üëÜüòÆ‚Äçüí®",)
    await callback.message.edit_media(media=media)
    await callback.message.answer('–û—Ö—Ö, –ø–æ–¥–∑–∞–µ–±–∞–ª–∞—Å—å —è –º–∞–ª–µ–Ω—å–∫–æ, —Ç—ã –∫–∞–∫?',reply_markup=home_kb)
    await state.clear()






# @user_router.message(Command('money'))
@user_router.message(or_f(Command('money'),F.text.lower().contains('–¥–æ–Ω–∞—Ç')))
async def money_cmd(message: types.Message):
    await message.answer_photo(photo=os.getenv('donate_art'),
                               caption='–ú–∞–º–∞, —É –º–µ–Ω—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –±—É–¥–µ—Ç —Ç–∞–∫–∏–º–∏ —Ç–µ–º–ø–∞–º–∏ü•∞',
                               reply_markup=get_url_btns(btns={'–ÆMoney': 'https://yoomoney.ru/fundraise/11P0R2TD4I4.240329'}
                                                         ))

class shron(StatesGroup):

    shronpre = State()

    last_class = None






@user_router.callback_query(F.data.startswith('full_pls'))
async def ffull_callback(callback: types.CallbackQuery, session: AsyncSession, ):

    query = (
        select( Video.video, Photo.photo))


    result = await session.execute(query)
    data = result.all()
    await  callback.answer()

    if data:

        random_entry = random.choice(data)
        video, photo = random_entry
        media = [video, photo]
        call = random.choice(media)

        if call == video:
            media = types.InputMediaVideo(media=video, caption="–ú–æ–∂–µ—Ç —á—Ç–æ-—Ç–æ –µ—â–µ?", )

            r = await callback.message.bot.edit_message_media(chat_id=callback.message.chat.id,message_id=callback.message.message_id,
            media=media, reply_markup=get_callback_btns(btns={
                '–ï—â–µ': 'full_pls',

            }))
            shron.last_class = r.message_id
        elif call == photo:
            media = types.InputMediaPhoto(media=photo, caption="–ú–æ–∂–µ—Ç —á—Ç–æ-—Ç–æ –µ—â–µ?", )

            r = await callback.message.bot.edit_message_media(chat_id=callback.message.chat.id,message_id=callback.message.message_id,
                                                              media=media,
                                              reply_markup=get_callback_btns(btns={
                                                  '–ï—â–µ': 'full_pls',

                                              }))
            shron.last_class = r.message_id
    else:
        await callback.message.answer('–ë–ª–∏–Ω—Å–∫–∏–π, —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å–∏–∫ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—åüò≠\n'
                                      '–ü–æ—Ö–æ–∂–µ –Ω–∏–∫—Ç–æ –ø–æ–∫–∞ –Ω–µ –∏–Ω—Ç—Ä–µ—Å–æ–≤–∞–ª—Å—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π')




@user_router.message(F.text.lower().contains('—Å—Ö—Ä–æ–Ω'))
async def shron_call(message: types.Message, session: AsyncSession,state: FSMContext):

    query = (
        select(Video.video, Photo.photo))


    result = await session.execute(query)
    data = result.all()

    if data:
        random_entry = random.choice(data)
        video, photo = random_entry
        media = [video,photo]
        call = random.choice(media)


        if call == video:
            r = await message.answer_video(video=video, caption="–ú–æ–∂–µ—Ç —á—Ç–æ-—Ç–æ –µ—â–µ?",
                                       reply_markup=get_callback_btns(btns={
                                                  '–ï—â–µ': 'full_pls',

                                              }))
            shron.last_class = r.message_id
        elif call == photo:
            r = await message.answer_photo(photo=photo, caption="–ú–æ–∂–µ—Ç —á—Ç–æ-—Ç–æ –µ—â–µ?",
                                              reply_markup=get_callback_btns(btns={
                                                  '–ï—â–µ': 'full_pls',

                                              }))
            shron.last_class = r.message_id


    else:
        await message.answer_photo(photo=os.getenv('shron_home'), caption='–ü–æ—Ö–æ–¥—É –Ω–µ—Ç –ø–æ—Ä–Ω—É—Ö–∏, –æ—Ç–∫—Ä—ã–≤–∞–π –ø—Ö',
                                   reply_markup=get_url_btns(btns={'PornHub': 'https://t.me/+V4Z9-kpFWpliYzk6'}
                                       ))
    await state.clear()




@user_router.message(Command("help"))
async def admin_help(message: types.Message, ):
    tr = await message.answer('–ù–µ –∑–Ω–∞–µ—à—å —á—Ç–æ –¥–µ–ª–∞—Ç—å? –•–º–º, –¥–∞–π –ø–æ–¥—É–º–∞—Ç—å..')
    await asyncio.sleep(1.5)
    sr = await message.answer('–ù–∞ —Å–∞–º–æ–º –¥–µ–ª–µ —è —Å–∞–º–∞ —Ö–∑')
    await asyncio.sleep(0.7)
    sy = await message.answer('–°—Ö–æ–¥–∏ –ø–æ–¥—Ä–æ—á–∏ —Ö—É–π –∑–Ω–∞–µ—ÇüôÉ')
    await asyncio.sleep(0.8)
    ft = await message.answer('–û–π –±–ª—è, —è –∂–µ –±–æ—Ç, —Å–æ—Ä—Ä–∏üòµ‚Äçüí´ü§ê')
    await asyncio.sleep(0.8)
    await message.bot.delete_message(message.chat.id, tr.message_id)
    await message.bot.delete_message(message.chat.id, sr.message_id)
    await message.bot.delete_message(message.chat.id, sy.message_id)
    await message.bot.delete_message(message.chat.id, ft.message_id)
    await message.answer('–ù–µ –∑–Ω–∞–µ—à—å —á—Ç–æ –ø–æ–¥–µ–ª–∞—Ç—å?\n–ù–µ –ø—Ä–æ–±–ª–µ–º–∞, –ú–∏—è –≤—Å–µ–≥–¥–∞ –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–º –ø–æ–≤–æ–¥–∫–µ! \n'
                         '–¢—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –≤ —Å—Ö—Ä–æ–Ω, —Ç–∞–º –≤—Å–µ–≥–¥–∞ –º–Ω–æ–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ, –º–æ–∂–µ—à—å –ø–æ—á–∏—Ç–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ –∏–ª–∏ –ø–æ–∏–≥—Ä–∞—Ç—åü•∞')


@user_router.message(F.text)
async def first_cmd(message: types.Message,):
    await message.answer(f'–•–µ–µ–µ–π, {message.from_user.first_name}, —è –¥–∞–∂–µ –Ω–µ –∑–Ω–∞—é —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å üò£')


# @user_router.message(F.text=='—á–∞—Ç –≥–ø—Ç')
# async def first_cmd(message: types.Message,session:AsyncSession):
#     chat_ids = await orm_get_gpt_chat_ids(session)
#     if str(message.chat.id) not in chat_ids:
#         await orm_add_gpt(session, str(message.chat.id), '', '')
#     await message.answer('–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —á–∞—Ç-–±–æ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–¥–µ–ª–∏ gpt 3.5üî•\n–ü—Ä–∏—Å—Ç—É–ø–∏–º!')

# @user_router.message(F.text)
# async def mes(message: types.Message, session:AsyncSession):
#     await gpt(session,
#     message.text, message.from_user.id, message.message_id)