#by Dzhuzo365
import asyncio
import os
import random

from aiogram import F, Router, types, Bot
from aiogram.enums import ParseMode
from aiogram.filters import Command, StateFilter, or_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from mainFile.database.models import Photo
from mainFile.database.orm_query import (
    orm_add_news,
    orm_delete_new,
    orm_add_video,
    orm_add_photo,
    orm_get_new,
    orm_update_new, orm_delete_media, orm_get_games, orm_add_game, orm_get_food, orm_create_food, orm_get_one_food,
    orm_update_food, orm_delete_food, orm_add_admin, get_and_send_admins_with_positions,
    orm_delete_admin,
    full_info_admins, orm_get_admins, orm_get_admin, orm_update_admin, orm_get_end_new, orm_get_previous_new,
    orm_get_next_new, orm_get_game, orm_delete_game, orm_update_game, orm_count_news,
)

from mainFile.filters.chat_types import ChatTypes, IsAdmin
from mainFile.keyboards.inline import get_callback_btns
from mainFile.keyboards.reply import get_keyboard
from mainFile.common.botcommands import private



admin_router = Router()
admin_router.message.filter(ChatTypes(["private"]), IsAdmin(AsyncSession))
bot=Bot(token=os.getenv('TOKEN'),parse_mode=ParseMode.HTML)


ADMIN_KB = get_keyboard(
    "ADD NW",
    "MEDIA ADD",
    "NEWS",
    "GAMES",
    'FOOD',
    'BACK',
    placeholder="–∫–∞–∫—É—é –ø–∏—Å—å–∫—É –≤—ã–ª–æ–∂–∏–º?",
    sizes=(2, 3, 1),
)

home_kb = get_keyboard(
    '–ù–æ–≤–æ—Å—Ç–∏',
    '–ò–≥—Ä—ã',
    '–î–æ–Ω–∞—Ç–∏–∫',
    '–°–•–†–û–ù',
    placeholder='—è –±—É–¥—É —Ç–µ–±—è –∂–¥–∞—Ç—å...',
    sizes=(2, 1, 1),
)

#////////////////////////////////////////////////////////////////\\\\\\\\ADD_ADMINS////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


class AddAdmin(StatesGroup):

    admin_del = State()
    admin_ch = State()
    ch_name = State()
    ch_cls = State()
    create = State()
    status = State()
    value = State()

    ch_ch = False

    admins_change = None
    last_messege = None




@admin_router.callback_query(F.data.startswith("nt_create"))
async def admin_nah(callback: types.CallbackQuery, session: AsyncSession,state: FSMContext):
    await callback.answer()
    query = select(Photo.photo)
    result = await session.execute(query)
    data = result.all()
    random_entry = random.choice(data)
    await callback.message.edit_text("–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞...üòû")
    await callback.message.answer_photo(photo=random_entry.photo,
                                        caption='–≤ –∑–Ω–∞–∫ –∏–∑–≤–∏–Ω–µ–Ω–∏—è, –ø—Ä–∏–º–∏—Ç–µ —Å–∫—Ä–æ–º–Ω—ã–π –¥–∞—Ä...',
                                        reply_markup=ADMIN_KB)
    await state.clear()




@admin_router.callback_query(F.data.startswith("adm_list"))
async def admin_lst(callback: types.CallbackQuery, session: AsyncSession, state: FSMContext ):
    await state.clear()
    admins_text = await get_and_send_admins_with_positions(session)
    await callback.message.edit_text(f'<i><b>–°–∫–æ–ª—å–∫–æ –ø–∞–ø–æ—á–µ–∫‚ù§Ô∏èüòç</b></i>\n<tg-spoiler>{admins_text}</tg-spoiler>',
                         reply_markup=get_callback_btns(btns={
                                            '–ø–æ–¥–ø—Ä–∞–≤–∏—Ç—å': 'ch_adm',
                                            '—Ä–∞—Å–∫—É–ª–∞—á–∏—Ç—å': 'ch_del'
                                        }))

@admin_router.message(Command("adm_list"))
async def admin_lst(message: types.Message, session: AsyncSession, state: FSMContext):
    await state.clear()
    admins_text = await get_and_send_admins_with_positions(session)
    await message.answer(f'<i><b>–°–∫–æ–ª—å–∫–æ –ø–∞–ø–æ—á–µ–∫‚ù§Ô∏èüòç</b></i>\n<tg-spoiler>{admins_text}</tg-spoiler>',
                         reply_markup=get_callback_btns(btns={
                                            '–ø–æ–¥–ø—Ä–∞–≤–∏—Ç—å': 'ch_adm',
                                            '—Ä–∞—Å–∫—É–ª–∞—á–∏—Ç—å': 'ch_del'
                                        }))


@admin_router.callback_query(F.data.startswith("ch_adm"))
async def ch_admin(callback: types.CallbackQuery, session: AsyncSession, state: FSMContext):
    adm_list = await full_info_admins(session)
    btns = {admin.name: f'admin_{admin.id}' for admin in adm_list}
    await callback.message.edit_text('–ö–æ–≥–æ –≤—ã —Ä–µ—à–∏–ª–∏ –ø–æ–¥–ø—Ä–∞–≤–∏—Ç—å?',
                                  reply_markup=get_callback_btns(btns=btns,sizes=(1,)))
    await state.set_state(AddAdmin.admin_ch)



@admin_router.callback_query(AddAdmin.admin_ch)
async def admin_change(callback: types.CallbackQuery,session: AsyncSession,state: FSMContext):
    admin_id = callback.data.split("_")[-1]
    AddAdmin.admins_change = await orm_get_admin(session, int(admin_id))
    await callback.message.edit_text('–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?',
                         reply_markup=get_callback_btns(btns={
                             '–ò–º—è': 'sname',
                             '–î–æ–ª–∂–Ω–æ—Å—Ç—å': 'cls',
                             '–æ—Ç–∫–∞—Ç': 'nt_create',
                         }))
    await state.update_data(name=AddAdmin.admins_change.name)
    await state.update_data(cls=AddAdmin.admins_change.cls)
    await state.set_state(AddAdmin.value)

@admin_router.callback_query(AddAdmin.value,F.data.startswith("sname"))
async def ch_admin_name(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text('–ö–∞–∫ –∑–≤–∞—Ç—å —Ç–æ?', reply_markup=get_callback_btns(btns={'–æ—Ç–∫–∞—Ç': 'nt_create'}))
    await state.set_state(AddAdmin.ch_name)
    AddAdmin.last_messege = callback.message.message_id

@admin_router.message(AddAdmin.ch_name, F.text)
async def admin_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.bot.edit_message_text(chat_id = message.chat.id, message_id=AddAdmin.last_messege ,text='–ß—Ç–æ –Ω–∞ —Å—á–µ—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç–∏?',reply_markup=
                                                        get_callback_btns(btns={
                                                            '–æ—Å—Ç–∞–≤—å':'save_cls',
                                                            '–∏–∑–º–µ–Ω–∏—Ç—å':'cls'
                                                        }))
    await  message.delete()
    AddAdmin.ch_ch = True
    await state.set_state(AddAdmin.value)

@admin_router.callback_query(AddAdmin.value,F.data.startswith("cls"))
async def ch_admin_name(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text('–ù—É –∏ —á—Ç–æ –æ–Ω –∏–∑ —Å–µ–±—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç?', reply_markup=get_callback_btns(btns={'–æ—Ç–∫–∞—Ç': 'nt_create'}))
    await state.set_state(AddAdmin.ch_cls)
    await state.set_state(AddAdmin.ch_cls)
    AddAdmin.last_messege = callback.message.message_id

@admin_router.message(AddAdmin.ch_cls, F.text)
async def admin_name(message: types.Message, state: FSMContext):
    await state.update_data(cls=message.text)
    await message.bot.edit_message_text(chat_id = message.chat.id,message_id=AddAdmin.last_messege,text='–ß—Ç–æ –Ω–∞ —Å—á–µ—Ç –∏–º–µ–Ω–∏?',reply_markup=
                                                        get_callback_btns(btns={
                                                            '–æ—Å—Ç–∞–≤—å':'save_name',
                                                            '–∏–∑–º–µ–Ω–∏—Ç—å':'sname'
                                                        }))
    await message.delete()
    AddAdmin.ch_ch = True
    await state.set_state(AddAdmin.value)

@admin_router.callback_query(AddAdmin.value,or_f(F.data.startswith("save_cls"),
                                                    F.data.startswith("save_name")))
async def admin_donwlpads(callback: types.CallbackQuery, session:AsyncSession ,state: FSMContext):
    data = await state.get_data()
    if AddAdmin.ch_ch == False:
        await callback.answer()
        await callback.message.edit_text('–î–∞ –≤—Å–µ –∏ —Ç–∞–∫ –ø–∏–∑–¥–∞—Ç–µ–Ω—å–∫–æ',)
    else:
        await orm_update_admin(session, AddAdmin.admins_change.id, data)
        await callback.answer('‚ú®–ø–æ–≤–µ–∑–ª–æ –¥–æ–ª–±–æ–µ–±—É‚ú®')
        await callback.message.edit_text('–¥–∞, –Ω–µ –ª–µ–≥–∫–∞—è —ç—Ç–æ —Ä–∞–±–æ—Ç–∫–∞',)
        await callback.message.answer('‚úû –î–∞—Ä—É—é –≤–∞–º –ø—Ä–∞–≤–∞ –º–æ–µ–≥–æ –æ—Ç—Ü–∞‚ìá',reply_markup= ADMIN_KB)
        AddAdmin.ch_ch = False

    await  state.clear()



@admin_router.callback_query(F.data.startswith("ch_del"))
async def delete_ad(callback: types.CallbackQuery, session: AsyncSession, state: FSMContext):
    await callback.answer()
    adm_list = await full_info_admins(session)
    btns = {admin.name: f'admin_{admin.id}' for admin in adm_list}
    await callback.message.edit_text('–ö—Ç–æ –ø—Ä–æ—è–≤–∏–ª –Ω–µ—É–≤–∞–∂–µ–Ω–∏–µ?',
                                     reply_markup=get_callback_btns(btns=btns,sizes=(1,)
                                        ))
    await state.set_state(AddAdmin.admin_del)


@admin_router.callback_query(AddAdmin.admin_del)
async def adm_bye(callback: types.CallbackQuery, session: AsyncSession, state: FSMContext):
    adm_id = callback.data.split("_")[-1]
    await orm_delete_admin(session, int(adm_id))
    await callback.answer('–∞ –Ω—É-–∫–∞ –Ω–∞—Ö—É–π –æ—Ç—Å—é–¥–∞.')
    await callback.message.edit_text('–û–Ω –Ω–∞—Å –ø—Ä–µ–¥–∞–ª...',
                                     reply_markup=get_callback_btns(btns={
                                         "–∫ —Å–ø–∏—Å–∫—É":'adm_list',
                                         '—Ö–æ–º':'home_adm',
                                     }
                                                                    ,)
                                        )
    await  state.clear()


@admin_router.callback_query(F.data.startswith("home_adm"))
async def adm_bye(callback: types.CallbackQuery,):
    await callback.answer()
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.edit_text('–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ—É...')
    await asyncio.sleep(0.7)
    await callback.message.edit_text('–ü—Ä–µ–¥–æ—Ö—Ä–∞–Ω—è–µ–º—Å—è...')
    await asyncio.sleep(0.4)
    await callback.message.edit_text('–ì–æ—Ç–æ–≤–æ')
    await asyncio.sleep(0.4)
    await callback.message.delete()
    await callback.message.answer('‚ú®–í–æ—Ç –º—ã –∏ –¥–æ–º–∞üéî',reply_markup=ADMIN_KB)



@admin_router.message(Command("create"))
async def admin_create(message: types.Message, state: FSMContext):
    sent_message = await message.answer("–£—Ö-—Ç—ã, —É –Ω–∞—Å –Ω–æ–≤–∞—è –≤–∞–∂–Ω–∞—è –ø–µ—Ä—Å–æ–Ω–∞? –ö–∞–∫ –µ–µ –∑–æ–≤—É—Ç?",
                                        reply_markup=get_callback_btns(btns={
                                            '–Ω–µ –Ω–∞—Ö—É–π': 'nt_create'
                                        }))
    await state.set_state(AddAdmin.create)

    await state.update_data(sent_message_id=sent_message.message_id)


@admin_router.message(AddAdmin.create, F.text)
async def admin_names(message: types.Message, session:AsyncSession ,state: FSMContext):
    admins_list = await orm_get_admins(session)
    if message.text in admins_list:
        await message.answer('–ö–∞–∂–∏—Å—å –æ–Ω —É–∂–µ –∫–æ–º—É-—Ç–æ –Ω–∞–ª–∏–∑–∞–ª, –æ–Ω –≤ –∞–¥–º–∏–Ω–∞—Ö')
    else:
     await state.update_data(name=message.text)
     await message.delete()
     data = await state.get_data()
     sent_message_id = data.get('sent_message_id')

     await message.bot.edit_message_text(chat_id=message.chat.id, message_id=sent_message_id,
                                             text="–ê–≥–∞, –∞ –∫—Ç–æ –æ–Ω —Å–∞–º –ø–æ —Å–µ–±–µ?", reply_markup=get_callback_btns(btns={
                                             '–Ω–µ –Ω–∞—Ö—É–π': 'nt_create'
                                         }))

     await state.update_data(sent_message_id=sent_message_id)

     await state.set_state(AddAdmin.status)


@admin_router.message(AddAdmin.status, F.text)
async def admin_status(message: types.Message, session: AsyncSession, state: FSMContext):
    await message.delete()
    await state.update_data(cls=message.text)
    data = await state.get_data()
    sent_message_id = data.get('sent_message_id')
    try:
        await orm_add_admin(session, data)
        await message.bot.edit_message_text(chat_id=message.chat.id, message_id=sent_message_id,
                                            text="–ù—É, —è –¥–æ–±–∞–≤–∏–ª–∞, –Ω–æ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–µ–¥–ø–æ—á–ª–∞ –±—ã —Ç–æ–ª—å–∫–æ –≤–∞—Å.")
        await state.clear()

    except Exception as e:
        await message.bot.edit_message_text(chat_id=message.chat.id, message_id=sent_message_id,text=
            f"–û—à–∏–±–æ—á–∫–∞ –≤—ã—à–ª–∞üò©: \n{str(e)}\n–°–∞–Ω—è –ø–∏–¥–∞—Ä–∞—Å, –æ–ø—è—Ç—å —Ö—É–µ–≤–µ—Ä—Ç–∏—Çü§¨",

        )
        await state.clear()


#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


class AddNews(StatesGroup):

    name = State()
    description = State()
    image = State()
    food = State()

    message_id = None

    texts = {
        'AddNews:name': '–ë–ª–∏–∏–Ω, –∞ –º–Ω–µ —Ç–∞–∫ –ø—Ä–æ—à–ª–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å...',
        'AddNews:description': '–í–æ—Ç —ç—Ç–æ –¥–∞, –≤—ã –º–æ–∂–µ—Ç–µ –∏ –ª—É—á—à–µ –Ω–∞–ø–∏—Å–∞—Ç—å,–∫—Ä—É—Ç–æüò≥',
        'AddNews:image': '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ü§ê',
        'AddNews:food': '–ï–±–∞–Ω–µ–º —Ö–µ—à—Ç–µ–≥?',
    }


@admin_router.message(Command("admin"))
async def admin_features(message: types.Message, session: AsyncSession):
    await message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –≥–æ—Å–ø–æ–¥–∏–Ωü•∞?\n –ï—Å–ª–∏ –≤—ã —É –Ω–∞—Å –≤–ø–µ—Ä–≤—ã–µ –Ω–∞–ø–∏—à–∏—Ç–µ /help", reply_markup=ADMIN_KB)
    await bot.set_my_commands(commands=private, scope=types.BotCommandScopeChat(chat_id=1723636175))
    await message.delete()

@admin_router.message(Command("help"))
async def admin_help(message: types.Message, ):
    await message.delete()
    await message.answer("–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–∞–Ω–¥:\n"
                         "/admin     ‚ûü —è –±—É–¥—É –≤ –≤–∞—à–µ–π –≤–ª–∞—Å—Ç–∏..\n"
                         "/adm_list ‚ûü —Å–ø–∏—Å–æ–∫ –ø–∞–ø–∏–∫–æ–≤‚ù¶\n"
                         "/create     ‚ûü –¥–æ–±–∞–≤–∏—Ç—å –ø–∞–ø–∏–∫–∞‚ò¨")

@admin_router.message(F.text=="BACK")
async def admin_f(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–Ø —Å–æ—Å–∫—É—á–∏–ª–∞—Å—å, –¥–∞–≤–∞–π—Ç–µ –ø–æ–æ–±—â–∞–µ–º—Å—èü•∞?", reply_markup=home_kb)



# ======
class Scroll_adm_nw(StatesGroup):
    first_nw = State()
    other_nw = State()
    scroll = State()


    last_news = None
    last_chat = None


@admin_router.message(F.text == 'NEWS')
async def about_cmd(message: types.Message, session: AsyncSession, state: FSMContext):
    count = await orm_count_news(session)
    if count:
        await message.answer('–Ω–µ—Ç –Ω–∏—Ö—É—è—à–µ–Ω—å–∫–∏')
    else:
        for new in await orm_get_end_new(session):
            LTS = await message.answer_photo(
                new.image,
                caption=f"<i><strong>{new.title}\
                                </strong></i>\n{new.news}\n{new.food}",reply_markup=get_callback_btns(btns={
                    '–ù–∞ –±–∞–∑—É': 'base',
                    '–î–∞–ª—å—à–µ': f'attack_{new.id}',
                    "–£–¥–∞–ª–∏—Ç—å": f"delete_{new.id}",
                    "–ò–∑–º–µ–Ω–∏—Ç—å": f"change_{new.id}",

                }, sizes=(2,)
                ))
        Scroll_adm_nw.last_news = LTS.message_id
        await  state.set_state(Scroll_adm_nw.scroll)

@admin_router.callback_query(StateFilter(Scroll_adm_nw.scroll),F.data.startswith('attack'))
async def atk_nws(callback: types.CallbackQuery, session: AsyncSession, ):

    news_id = int(callback.data.split('_')[-1])
    news_update = await orm_get_previous_new(session,news_id)
    if news_update:
        await callback.answer()
        title = f"<b>{news_update.title}</b>"
        caption = '\n'.join([title, news_update.news, news_update.food])
        media = types.InputMediaPhoto(media=news_update.image, caption= caption)
        LTS = await callback.message.edit_media(media=media, reply_markup=get_callback_btns(btns={
            '–ù–∞–∑–∞–¥':f'homing_{news_update.id}',
            '–î–∞–ª—å—à–µ': f'attack_{news_update.id}',
            "–£–¥–∞–ª–∏—Ç—å": f"delete_{news_update.id}",
            "–ò–∑–º–µ–Ω–∏—Ç—å": f"change_{news_update.id}",
            '–ù–∞ –±–∞–∑—É': 'base',


            }
        ))
    else:
        await callback.answer("–∞ –≤—Å–µ, –∫–æ–Ω–µ—Ü")
        return

    Scroll_adm_nw.last_news = LTS.message_id



@admin_router.callback_query(StateFilter(Scroll_adm_nw.scroll),F.data.startswith('homing'))
async def home_nws(callback: types.CallbackQuery, session: AsyncSession, ):
    news_id = int(callback.data.split('_')[-1])
    news_update = await orm_get_next_new(session, news_id)
    if news_update == None:
        await callback.answer('–≠—Ç–æ –Ω–æ–≤–µ–π—à–µ–µ')
        return


    if news_update:
        await callback.answer()
        title = f"<b>{news_update.title}</b>"
        caption = '\n'.join([title, news_update.news, news_update.food])
        media = types.InputMediaPhoto(media=news_update.image, caption=caption)
        LTS = await callback.message.edit_media(media=media, reply_markup=get_callback_btns(btns={
            '–ù–∞–∑–∞–¥': f'homing_{news_update.id}',
            '–î–∞–ª—å—à–µ': f'attack_{news_update.id}',
            "–£–¥–∞–ª–∏—Ç—å": f"delete_{news_update.id}",
            "–ò–∑–º–µ–Ω–∏—Ç—å": f"change_{news_update.id}",
            '–ù–∞ –±–∞–∑—É': 'base',

        }
        ))
        Scroll_adm_nw.last_news = LTS.message_id




@admin_router.callback_query(StateFilter(Scroll_adm_nw.scroll),F.data.startswith('base'))
async def base_nws(callback: types.CallbackQuery,state: FSMContext ):
    await callback.answer()
    media = types.InputMediaVideo(media=os.getenv('news_home'),caption="–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–∞—Ö—É–π –∏—Ö, –Ω–∞ —á–µ–º —Ç–µ–ø–µ—Ä—å –∑–∞–ª–∏–ø–Ω–µ–º? –∫—Å—Ç–∞, —Å–º–æ—Ç—Ä–∏—à—å –∞–Ω–∏–º–µ?üëÜüòÆ‚Äçüí®")
    await callback.message.edit_media(media=media)
    await state.clear()

# ========


@admin_router.callback_query(StateFilter(Scroll_adm_nw.scroll),F.data.startswith("delete_"))
async def delete_new(callback: types.CallbackQuery, session: AsyncSession, ):
    new_id = callback.data.split("_")[-1]
    await orm_delete_new(session, int(new_id))
    await callback.answer('–∞ –Ω—É-–∫–∞ –Ω–∞—Ö—É–π –æ—Ç—Å—é–¥–∞.')
    await callback.message.bot.edit_message_caption(chat_id=callback.message.chat.id,message_id=Scroll_adm_nw.last_news
                                                    ,caption='–ù–û–í–û–°–¢–¨ –£–î–ê–õ–ï–ù–ê',reply_markup=get_callback_btns(btns={
            '–ù–∞–∑–∞–¥':f'homing_{new_id}',
            '–î–∞–ª—å—à–µ': f'attack_{new_id}',
            "–£–¥–∞–ª–∏—Ç—å": f"delete_{new_id}",
            "–ò–∑–º–µ–Ω–∏—Ç—å": f"change_{new_id}",
            '–ù–∞ –±–∞–∑—É': 'base',


            }
        ))



# –°—Ç–∞–Ω–æ–≤–∏–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ name
@admin_router.message(F.text == "ADD NW")
async def add_news(message: types.Message, state: FSMContext):
    spent_name = await message.answer(
        "–ö–∞–∫ –≤—ã –Ω–∞–∑–æ–≤—ë—Ç–µ –Ω–æ–≤–æ—Å—Ç—å?",
    )
    await state.set_state(AddNews.name)
    Scroll_adm_nw.last_news = spent_name.message_id


# –•–µ–Ω–¥–ª–µ—Ä –æ—Ç–º–µ–Ω—ã –∏ —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—Å–µ–≥–¥–∞ –∏–º–µ–Ω–Ω–æ —Ö–¥–µ—Å—å,
# –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤—Å—Ç–∞–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–º–µ—Ä 1 (—ç–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω–∞—è –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–æ–≤)
@admin_router.message(StateFilter('*'), Command("—Ö—É–π–Ω—è"))
@admin_router.message(StateFilter('*'), F.text.casefold() == "—Ö—É–π–Ω—è")
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.clear()
    await message.answer("–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞...üòû", reply_markup=ADMIN_KB)


# –í–µ—Ä–Ω—É—Ç—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥ (–Ω–∞ –ø—Ä–æ—à–ª–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)

@admin_router.message(StateFilter(AddNews), F.text.casefold() == "–Ω–∞–∑–∞–¥")
async def back_step_handler(message: types.Message, state: FSMContext) -> None:
    current_state = await state.get_state()

    if current_state == AddNews.name:
        await message.answer('–•–æ–∑—è–∏–Ω... –ü—É—Ç–∏ –Ω–∞–∑–∞–¥ –Ω–µ—Ç, –¥–∞–≤–∞–π—Ç–µ –¥–æ–≤–µ–¥–µ–º –¥–µ–ª–æ –¥–æ –∫–æ–Ω—Ü–∞üòñ?')
        return

    previous = None
    for step in AddNews.__all_states__:
        if step.state == current_state:
            await state.set_state(previous)
            await message.answer(f"–û—Ö—Ö, —Ç—è–∂–µ–ª–æ, –≤–µ—Ä–Ω–µ–º—Å—è –Ω–∞–∑–∞–¥?\n{AddNews.texts[previous.state]}")
            return
        previous = step


# –õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ name –∏ –ø–æ—Ç–æ–º –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ description
@admin_router.message(AddNews.name, F.text)
async def add_name(message: types.Message,state: FSMContext):

    if len(message.text) >= 100:
        await message.answer(
                "–°–ª—É—à–∞–π, —á—Ç–æ-—Ç–æ –±–æ–ª—å—à–µ–≤–∞—Ç–æ –≤—ã—à–ª–æ, –≤ –º–µ–Ω—è –Ω–µ –≤–ª–µ–∑–µ—Ç... \n –ú–æ–∂–µ—Ç, —á—É—Ç—å –ø–æ–º–µ–Ω—å—à–µ?ü•∫"
            )

        return


    await state.update_data(name=message.text)
    spent_desc = await message.bot.edit_message_text(chat_id=message.chat.id,message_id=Scroll_adm_nw.last_news,text=
                                        f"–ß—Ç–æ –∂–µ –≤—ã –Ω–∞–º –ø–æ–≤–µ–¥–∞–µ—Ç–µ, –º–∏—Å—Ç–µ—Ä {message.from_user.first_name}?")
    Scroll_adm_nw.last_news = spent_desc.message_id
    await message.delete()

    await state.set_state(AddNews.description)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ª–æ–≤–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤–≤–æ–¥–æ–≤ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è name
@admin_router.message(AddNews.name)
async def add_name2(message: types.Message, ):
    fake_nw =await message.bot.edit_message_text(chat_id=message.chat.id,message_id=Scroll_adm_nw.last_news,
                                        text="–í–∞—É, —ç—Ç–æ –¥–ª—è –º–µ–Ω—èü´¢? –ù–æ –∫–∞–∫ –∂–µ –≤—ã –Ω–∞–∑–æ–≤–µ—Ç–µ –Ω–æ–≤–æ—Å—Ç—å?")
    await message.delete()
    Scroll_adm_nw.last_news = fake_nw.message_id


# –õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ description –∏ –ø–æ—Ç–æ–º –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ price
@admin_router.message(AddNews.description, F.text)
async def add_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    spent_hash = await message.bot.edit_message_text(chat_id=message.chat.id,message_id=Scroll_adm_nw.last_news,
                                        text="–î–∞–≤–∞–π –ø–æ—Å—Ç–∞–≤–∏–º #  –¥–ª—è –ª—É—á—à–µ–≥–æ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è?")
    await message.delete()
    Scroll_adm_nw.last_news = spent_hash.message_id
    await state.set_state(AddNews.food)

@admin_router.message(AddNews.food, F.text)
async def add_food(message: types.Message, state: FSMContext):
    txt = message.text
    if '#' in txt:
        await state.update_data(food=message.text)
    else:
        await state.update_data(food='#'+message.text)
    spent_image = await message.bot.edit_message_text(chat_id=message.chat.id,message_id=Scroll_adm_nw.last_news,
                                        text="–ë—É–¥—É—Ç –ª–∏ –∫–∞–∫–∏–µ –Ω–∏–±—É–¥—å –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏?")
    Scroll_adm_nw.last_news = spent_image.message_id
    await message.delete()
    await state.set_state(AddNews.image)

@admin_router.message(AddNews.food)
async def add_food2(message: types.Message, ):
    fake_fod =await message.bot.edit_message_text(chat_id=message.chat.id,message_id=Scroll_adm_nw.last_news,
                                        text="–ê —Ç–µ–ø–µ—Ä—å –µ–±–∞–Ω–∏ —Ö–µ—à—Ç–µ–≥ –ø—Ä—è–º –Ω–∞ –º–µ–Ω—èüòò")
    await message.delete()
    Scroll_adm_nw.last_news = fake_fod.message_id

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ª–æ–≤–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤–≤–æ–¥–æ–≤ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è description
@admin_router.message(AddNews.description)
async def add_description2(message: types.Message, ):
    fake_desc =await message.bot.edit_message_text(chat_id=message.chat.id,message_id=Scroll_adm_nw.last_news,
                                        text="–í–∞—É, —ç—Ç–æ –¥–ª—è –º–µ–Ω—èü´¢? –ù–æ –∫–∞–∫ –∂–µ –≤—ã –Ω–∞–∑–æ–≤–µ—Ç–µ –Ω–æ–≤–æ—Å—Ç—å?")
    await message.delete()
    Scroll_adm_nw.last_news = fake_desc.message_id

# –õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ image –∏ –ø–æ—Ç–æ–º –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π
@admin_router.message(AddNews.image,F.photo)
async def add_image(message: types.Message, state: FSMContext, session: AsyncSession):

    await state.update_data(image=message.photo[-1].file_id)

    data = await state.get_data()
    try:
        await orm_add_news(session, data)
        forms = await message.bot.edit_message_text(chat_id=message.chat.id, message_id=Scroll_adm_nw.last_news,
                                                    text="–æ—Ñ–æ—Ä–º–∏—Ç–µ –º–µ–Ω—è –≤–µ—á–µ—Ä–æ–º, –º–∞—Å—Ç–µ—Ä‚ö§ üíò")
        Scroll_adm_nw.last_news = forms.message_id
        await message.delete()
        await asyncio.sleep(0.9)
        await message.bot.delete_message(message.chat.id, Scroll_adm_nw.last_news)
        await message.answer('–∫—Ö–º. –£—Ä–∞! –¢–µ–ø–µ—Ä—å –ª—é–¥–∏ –±—É–¥—É—Ç –ø–æ—Å–≤–µ—â–µ–Ω—ã!', reply_markup=ADMIN_KB)

        await state.clear()

    except Exception as e:
        firms = await message.bot.edit_message_text(chat_id=message.chat.id, message_id=Scroll_adm_nw.last_news,
                                                    text=
                                                    f"–û—à–∏–±–æ—á–∫–∞ –≤—ã—à–ª–∞üò©: \n{str(e)}\nüíò–æ—Ñ–æ—Ä–º–∏—à—å –º–µ–Ω—è , –≤ –ø–µ—Ä–µ—Ä—ã–≤–µ?üíò",

                                                    )
        Scroll_adm_nw.last_news = firms.message_id
        await message.delete()
        await asyncio.sleep(0.9)
        await message.bot.delete_message(message.chat.id, Scroll_adm_nw.last_news)
        await message.answer('–∫—Ö–º. –ù—É –Ω–∏—á–µ–≥–æ, —Å–∫–æ—Ä–æ –≤—Å–µ –ø–æ—á–∏–Ω—è—Ç, –Ω–∞–≤–µ—Ä–Ω–æ–µ..', reply_markup=ADMIN_KB)

        await state.clear()
    AddNews.new_for_change = None
    Scroll_adm_nw.last_news = None



@admin_router.message(AddNews.image, F.text.lower().contains('–Ω–µ'))
async def add_image2(message: types.Message, state: FSMContext, session: AsyncSession):
    await state.update_data(image=os.getenv('new_miu'))
    data = await state.get_data()
    try:
        await orm_add_news(session, data)
        forms = await message.bot.edit_message_text(chat_id=message.chat.id, message_id=Scroll_adm_nw.last_news,
                                            text="–æ—Ñ–æ—Ä–º–∏—Ç–µ –º–µ–Ω—è –≤–µ—á–µ—Ä–æ–º, –º–∞—Å—Ç–µ—Ä‚ö§ üíò")
        Scroll_adm_nw.last_news = forms.message_id
        await message.delete()
        await asyncio.sleep(0.9)
        await message.bot.delete_message(message.chat.id, Scroll_adm_nw.last_news)
        await message.answer('–∫—Ö–º. –£—Ä–∞! –¢–µ–ø–µ—Ä—å –ª—é–¥–∏ –±—É–¥—É—Ç –ø–æ—Å–≤–µ—â–µ–Ω—ã!', reply_markup=ADMIN_KB)

        await state.clear()

    except Exception as e:
        firms = await message.bot.edit_message_text(chat_id=message.chat.id, message_id=Scroll_adm_nw.last_news,
                                            text=
                                            f"–û—à–∏–±–æ—á–∫–∞ –≤—ã—à–ª–∞üò©: \n{str(e)}\nüíò–æ—Ñ–æ—Ä–º–∏—à—å –º–µ–Ω—è , –≤ –ø–µ—Ä–µ—Ä—ã–≤–µ?üíò",

                                            )
        Scroll_adm_nw.last_news = firms.message_id
        await message.delete()
        await asyncio.sleep(0.9)
        await message.bot.delete_message(message.chat.id, Scroll_adm_nw.last_news)
        await message.answer('–∫—Ö–º. –ù—É –Ω–∏—á–µ–≥–æ, —Å–∫–æ—Ä–æ –≤—Å–µ –ø–æ—á–∏–Ω—è—Ç, –Ω–∞–≤–µ—Ä–Ω–æ–µ..', reply_markup=ADMIN_KB)

        await state.clear()
    AddNews.new_for_change = None
    Scroll_adm_nw.last_news = None


@admin_router.message(AddNews.image)
async def add_image3(message: types.Message, ):
    fake_img =await message.bot.edit_message_text(chat_id=message.chat.id,message_id=Scroll_adm_nw.last_news,
                                        text="–ë–ª–∏–Ω, —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–∫—É?")
    await message.delete()
    Scroll_adm_nw.last_news = fake_img.message_id

# ======================================================================================================================
# ==============================================___CHANGE CLASS___======================================================

change_kb = get_callback_btns(
    btns={
        '–ù–∞–∑–≤–∞–Ω–∏–µ': 'ch_name',
        '–ù–æ–≤–æ—Å—Ç—å': 'ch_description',
        '–§–æ—Ç–æ': 'ch_image',
        '–•–µ—à—Ç–µ–≥': 'ch_food',
        '–ù–∞ –≥–ª–∞–≤–Ω—É—é': 'home',
    },
    sizes=(3,1,1)
)


class Change(StatesGroup):
    change = State()
    name = State()
    description = State()
    image = State()
    food = State()

    new_for_change = None
    ch_ch = False
    hey_party = None
    hellcat = None




@admin_router.callback_query(StateFilter(Scroll_adm_nw.scroll), F.data.startswith("change_"))
async def change_news_callback(
        callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    news_id = callback.data.split("_")[-1]
    new_for_change = await orm_get_new(session, int(news_id))
    Change.new_for_change = new_for_change
    await callback.answer()
    srt = await callback.message.answer(
        "–Ø —á—Ç–æ, –æ—à–∏–±–ª–∞—Å—å –≤ –Ω–æ–≤–æ—Å—Ç–∏üò∞?–ü—Ä–æ—à—É –ø—Ä–æ—Å—Ç–∏—Ç–µüò≠\n–°–∫–∞–∂–∏—Ç–µ —á—Ç–æ –Ω–µ —Ç–∞–∫, —è —Ç—É—Ç –∂–µ –∏—Å–ø—Ä–∞–≤–ª—é..",
        reply_markup=change_kb,
    )
    await state.update_data(name=Change.new_for_change.title)
    await state.update_data(description=Change.new_for_change.news)
    await state.update_data(image=Change.new_for_change.image)
    await state.update_data(food=Change.new_for_change.food)

    await state.set_state(Change.change)
    Change.hellcat = srt.message_id


@admin_router.callback_query(Change.change, F.data.startswith("ch_name"))
async def callback_name(callback: types.CallbackQuery, state: FSMContext ):
    await callback.answer()
    art = await callback.message.answer('–ö–∞–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—Å —É—Å—Ç—Ä–æ–∏—Ç?',
                                  )
    await state.set_state(Change.name)
    Change.hey_party = art.message_id


@admin_router.message(Change.name, F.text)
async def update_name(message: types.Message,state: FSMContext, ):
    await state.update_data(name=message.text)
    await message.delete()
    await message.bot.delete_message(message.chat.id,Change.hey_party)
    srt = await message.bot.edit_message_text(chat_id=message.chat.id,message_id=Change.hellcat,
                                        text='–•–æ—Ç–∏—Ç–µ –µ—â–µ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?',
                                  reply_markup=change_kb)
    Change.ch_ch = True
    await state.set_state(Change.change)
    Change.hellcat = srt.message_id


@admin_router.callback_query(Change.change, F.data.startswith("ch_description"))
async def callback_destriction(callback: types.CallbackQuery, state: FSMContext,):
    await callback.answer()
    art = await callback.message.answer('–¢—ã —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å? –ê –º–Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å..',
                                  )
    await state.set_state(Change.description)
    Change.hey_party = art.message_id

@admin_router.message(Change.description, F.text)
async def update_destriction(message: types.Message, state: FSMContext,):
    await message.delete()
    await message.bot.delete_message(message.chat.id, Change.hey_party)
    await state.update_data(description=message.text)
    # srt = await message.bot.edit_message_text(chat_id=message.chat.id, message_id=Change.hellcat,
    #                                     text='–•–æ—Ç–∏—Ç–µ –µ—â–µ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?',
    #                               reply_markup=change_kb)
    Change.ch_ch = True
    await state.set_state(Change.change)
    # Change.hellcat = srt.message_id


@admin_router.callback_query(Change.change, F.data.startswith("ch_food"))
async def callback_food(callback: types.CallbackQuery, state: FSMContext, ):
    await callback.answer()
    art = await callback.message.answer(f'–ï–ø—Ç, —Ö–µ—à—Ç–µ–≥, –Ω—É —Ç—ã —á–µ–≥–æ?‚ù§Ô∏è',
                                  )
    await state.set_state(Change.food)
    Change.hey_party = art.message_id

@admin_router.message(Change.food, F.text)
async def update_food(message: types.Message, state: FSMContext,):
    txt = message.text
    await message.bot.delete_message(message.chat.id, Change.hey_party)
    await message.delete()
    if '#' in txt:
        await state.update_data(food=message.text)
    else:
        await state.update_data(food='#'+message.text)
    # srt = await message.bot.edit_message_text(chat_id=message.chat.id, message_id=Change.hellcat,
    #                                           text='–•–æ—Ç–∏—Ç–µ –µ—â–µ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?',
    #                               reply_markup=change_kb)
    Change.ch_ch = True
    await state.set_state(Change.change)
    # Change.hellcat = srt.message_id



@admin_router.callback_query(Change.change, F.data.startswith("ch_image"))
async def callback_image(callback: types.CallbackQuery, state: FSMContext, ):
    await callback.answer()
    srt = await callback.message.answer(f'–ú–æ–∂–Ω–æ —è –±—É–¥—É –Ω–∞ —Ñ–æ—Ç–∫–µ? –ù—É –ø–æ–∂–∞–ª—É–π—Å—Ç–∞‚ù§Ô∏è',
                                  )
    await state.set_state(Change.image)
    Change.hey_party = srt.message_id

@admin_router.message(Change.image, F.photo)
async def update_image(message: types.Message, state: FSMContext,):
    await message.delete()
    await message.bot.delete_message(message.chat.id, Change.hey_party)
    await state.update_data(image=message.photo[-1].file_id)
    # srt = await message.bot.edit_message_text(chat_id=message.chat.id, message_id=Change.hellcat,
    #                                           text='–•–æ—Ç–∏—Ç–µ –µ—â–µ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?',
    #                               reply_markup=change_kb)
    Change.ch_ch = True
    await state.set_state(Change.change)
    # Change.hellcat = srt.message_id

@admin_router.callback_query(Change.change, F.data.startswith("home"))
async def callback_image(callback: types.CallbackQuery, state: FSMContext,  session: AsyncSession):
    data = await state.get_data()
    if Change.ch_ch == False:
        await callback.answer()
        await callback.message.bot.delete_message(chat_id=callback.message.chat.id,
                                                  message_id=callback.message.message_id)
        await callback.message.answer('–î–∞ –≤—Å–µ –∏ —Ç–∞–∫ –ø–∏–∑–¥–∞—Ç–µ–Ω—å–∫–æ', reply_markup=ADMIN_KB)
    else:
        await callback.answer('‚ú®—Å—Ç–∞–ª–æ –ø–∏–∑–∂–µ‚ú®')
        await callback.message.bot.delete_message(chat_id=callback.message.chat.id,
                                                  message_id=callback.message.message_id)
        await orm_update_new(session, Change.new_for_change.id, data)
        await callback.message.answer('–¥–∞, –Ω–µ –ª–µ–≥–∫–∞—è —ç—Ç–æ —Ä–∞–±–æ—Ç–∫–∞', reply_markup=ADMIN_KB)
        Change.ch_ch = False

    await  state.clear()






#=======================================================================================================================
#====================================__MEDIA CLASS__====================================================================


class AddMedia(StatesGroup):
    media = State()

    media_for_change = None
    more = False




@admin_router.message(AddMedia.media,Command('delete'))
async def delete_media(session: AsyncSession):
    await orm_delete_media(session)



@admin_router.message(StateFilter('*'), Command("—Ö—É–π–Ω—è"))
@admin_router.message(StateFilter('*'), F.text.casefold() == "—Ö—É–π–Ω—è")
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.clear()
    await message.bot.delete_message(chat_id=message.chat.id,message_id=AddMedia.media_for_change)
    await message.answer("–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞...üòû", reply_markup=ADMIN_KB)


@admin_router.message(F.text == "MEDIA ADD")
async def donwload_media(message: types.Message, state: FSMContext):
    await message.delete()
    r = await message.answer("–ï–±–∞—Ç—å, –∫–æ–Ω—Ç–µ–Ω—Ç? –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –ø–∏—à–∏—Ç–µ '—Ö—É–π–Ω—è'\n–ò–ª–∏ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫ —Ö—É—è–º /delete",)
    await state.set_state(AddMedia.media)
    AddMedia.media_for_change = r.message_id


@admin_router.callback_query(AddMedia.media, F.data.startswith('home_md'))
async def home_media_clb(callback: types.CallbackQuery, state:FSMContext):
    await state.clear()
    r = await callback.message.bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id,
                                                 text='—â–∞ —Å–µ–∫, —Å–æ—Ö—Ä–∞–Ω—é –∏–Ω—Ñ—É')
    await asyncio.sleep(0.8)
    await callback.message.bot.delete_message(chat_id=callback.message.chat.id, message_id=r.message_id)
    await callback.message.answer('–º—ã –¥–æ–º–∞', reply_markup=ADMIN_KB)



@admin_router.message(or_f(F.photo, F.video), StateFilter(AddMedia.media))
async def add_media(message: types.Message,session:AsyncSession, state: FSMContext):
    if message.photo:
        await state.update_data(photo=message.photo[-1].file_id)
        data = await state.get_data()
        try:
            await orm_add_photo(session, data)
            await message.delete()
            if AddMedia.more == False:
                r = await message.bot.edit_message_text(chat_id=message.chat.id,message_id=AddMedia.media_for_change,
                                                        text="–í–∞—É, —É–≤–∏–¥–µ—Ç—å –±—ã –µ–µ –≤ –∂–∏–≤—É—éü•∫",
                                                      reply_markup=get_callback_btns(
                                                         btns={
                                                             '–¥–æ–º–æ–π':'home_md',
                                                           }
                 ))
                AddMedia.media_for_change = r.message_id
                AddMedia.more = True
        except Exception as e:
            r = await message.bot.edit_message_text(chat_id=message.chat.id, message_id=AddMedia.media_for_change,
                                                  text=
                f"–û—à–∏–±–æ—á–∫–∞ –≤—ã—à–ª–∞üò©: \n{str(e)}\n–°–∞–Ω—è –ø–∏–¥–∞—Ä–∞—Å, –æ–ø—è—Ç—å —Ö—É–µ–≤–µ—Ä—Ç–∏—Çü§¨",

            )
            AddMedia.media_for_change = r.message_id
            await state.clear()

    if message.video:
        await state.update_data(video=message.video.file_id)
        data = await state.get_data()
        await message.delete()
        try:
            await orm_add_video(session, data)
            if AddMedia.more == False:
                r = await message.bot.edit_message_text(chat_id=message.chat.id, message_id=AddMedia.media_for_change,
                                                      text="–í–∞—É, —É–≤–∏–¥–µ—Ç—å –±—ã –µ–µ –≤ –∂–∏–≤—É—éü•∫",reply_markup=get_callback_btns(
                                                         btns={
                                                              '–¥–æ–º–æ–π':'home_md',
                                                            }
                    ))
                AddMedia.media_for_change = r.message_id
                AddMedia.more = True

        except Exception as e:
            r = await message.bot.edit_message_text(chat_id=message.chat.id, message_id=AddMedia.media_for_change,
                                                    text=
                f"–û—à–∏–±–æ—á–∫–∞ –≤—ã—à–ª–∞üò©: \n{str(e)}\n–°–∞–Ω—è –ø–∏–¥–∞—Ä–∞—Å, –æ–ø—è—Ç—å —Ö—É–µ–≤–µ—Ä—Ç–∏—Çü§¨",

                )
            AddMedia.media_for_change = r.message_id
            await state.clear()
    if message.video_note:
        await message.answer('—Ö—É–π')


#=========================================------____GAMES_CLASS____-------==============================================


class GameDev(StatesGroup):
    start = State()
    development = State()
    preSTART = State()
    name = State()
    description = State()
    image = State()
    food_id = State()

    texts = {
        'GameDev:name': '–ù—É —á—Ç–æ –ø–æ–¥–µ–ª–∞—Ç—å –≤–µ—Ä–Ω–µ–º—Å—è –∫ –Ω–∞–∑–≤–∞–Ω–∏—é.',
        'GameDev:description': '–ü—Ä–µ–¥–µ—Ç—Å—è –∑–∞–Ω–æ–≤–æ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å...',
        'GameDev:development': '–ï—Å—Ç—å –∏–≥—Ä—É—à–∫–∏ –∏ –ø–æ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ‚ù§Ô∏è',
    }


    last_game_id = None
    last_game_id2 = None

@admin_router.message(F.text == 'GAMES')
async def admin_palying(message: types.Message, session: AsyncSession, state: FSMContext):
    play_list = await orm_get_games(session)
    btns = {game.name : f'category_{game.id}' for game in play_list}
    list_game = await message.answer_photo(photo=os.getenv('game_home'),caption="–í—ã —Ä–µ—à–∏–ª–∏ –ø–æ–∏–≥—Ä–∞—Ç—å?)", reply_markup=get_callback_btns(btns=btns,
                                                                                sizes=(1,)))
    await asyncio.sleep(0.4)
    game_make = await message.answer("–ò–ª–∏ –º–æ–∂–µ—Ç —á—Ç–æ-—Ç–æ –Ω–æ–≤–µ–Ω—å–∫–æ–µ?",reply_markup=get_keyboard('–°–û–ó–î–ê–¢–¨'))
    await  state.set_state(GameDev.development)
    GameDev.last_game_id = game_make.message_id
    GameDev.last_game_id2 = list_game.message_id

#=================================================

# @admin_router.message(or_f(GameDev.START,GameDev.preSTART), F.text == '–ù–ê–ï..–ò–ì–†–ê–õ–°–Ø')
# async def end_game(message: types.Message,  state: FSMContext):
#     global last_message_id
#     if last_message_id:
#         await bot.delete_message(message.chat.id, last_message_id)
#         last_message_id = None
#     await state.clear()
#     await message.answer('–•–≤–∞—Ç–∏—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏–≥—Ä—É—à–µ–∫..ü•±ü§Ø', reply_markup=home_kb)


@admin_router.callback_query(GameDev.development)
async def start_game(callback: types.CallbackQuery, session: AsyncSession, state: FSMContext):
    await  callback.answer()
    game_id = callback.data.split("_")[-1]
    game = await orm_get_game(session, int(game_id))
    name = f"<b>{game.name}</b>"
    caption = '\n'.join([name, game.description,])
    await callback.message.bot.delete_message(callback.message.chat.id, GameDev.last_game_id)
    media = types.InputMediaPhoto(media=game.image, caption=caption)
    last_message = await callback.message.bot.edit_message_media(chat_id=callback.message.chat.id, message_id=GameDev.last_game_id2
                                                                 ,media=media, )
    last_messagee = await callback.message.bot.edit_message_reply_markup(chat_id=callback.message.chat.id, message_id=last_message.message_id,
                                                         reply_markup=get_callback_btns(btns={
                 '–ù–∞–∑–∞–¥':'back',
                 '–£–¥–∞–ª–∏—Ç—å':f'del_{game_id}',
                 '–ò–∑–º–µ–Ω–∏—Ç—å':f'change_{game_id}'
            }, sizes=(1,2,)))

    GameDev.last_game_id = last_messagee.message_id
    await state.set_state(GameDev.preSTART)




# btns = {food.classification: f'category_{food.id}' for food in food_list}

@admin_router.callback_query(GameDev.preSTART,F.data.startswith('del_'))
async def restart_game(callback: types.CallbackQuery,session: AsyncSession, state: FSMContext):
    await callback.answer('üßπ–ú—É—Å–æ—Ä —É–±—Ä–∞–Ωüóë')
    game_id = callback.data.split("_")[-1]
    await orm_delete_game(session, int(game_id))
    play_list = await orm_get_games(session)
    btns = {game.name: f'category_{game.id}' for game in play_list}
    media = types.InputMediaPhoto(media=os.getenv('game_home'), caption="–í—ã —Ä–µ—à–∏–ª–∏ –ø–æ–∏–≥—Ä–∞—Ç—å?)")
    list_game = await callback.message.bot.edit_message_media(chat_id=callback.message.chat.id,message_id=GameDev.last_game_id,
                                                              media=media,
                                           reply_markup=get_callback_btns(btns=btns,
                                                                          sizes=(1,)))
    await asyncio.sleep(0.7)
    game_make = await callback.message.answer("–ò–ª–∏ –º–æ–∂–µ—Ç —á—Ç–æ-—Ç–æ –Ω–æ–≤–µ–Ω—å–∫–æ–µ?", reply_markup=get_keyboard('–°–û–ó–î–ê–¢–¨'))
    await  state.set_state(GameDev.development)
    GameDev.last_game_id = game_make.message_id
    GameDev.last_game_id2 = list_game.message_id

#=======================================================================================================================
#========================================= –ò–ó–ú–ï–ù–ï–ù–ò–Ø –í –ò–ì–†–ê–•!!!!========================================================

game_kb = get_callback_btns(
    btns={
        '–ù–∞–∑–≤–∞–Ω–∏–µ': 'ch_name',
        '–û–ø–∏—Å–∞–Ω–∏–µ': 'ch_description',
        '–§–æ—Ç–æ': 'ch_image',
        '–ü—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å': 'ch_food',
        '–ù–∞ –≥–ª–∞–≤–Ω—É—é': 'home',
    },
    sizes=(3,1,1)
)


class game_repair(StatesGroup):
    change = State()
    name = State()
    description = State()
    image = State()
    food = State()

    game_for_change = None
    ch_ch = False
    last_game_id = None
    media = types.InputMediaPhoto(media=os.getenv('repair_game'), caption="–ú–∏—è —á–∏–Ω–∏–ª–∞ –Ω–∞ —Å–≤—è–∑–∏ –±–æ—Å—Åüì≤ –ß—Ç–æ –ø–æ—á–∏–Ω–∏—Ç—å?", )





@admin_router.callback_query(GameDev.preSTART,F.data.startswith('change'))
async def change_game(callback: types.CallbackQuery,session: AsyncSession, state: FSMContext):
    game_id = callback.data.split("_")[-1]
    game_for_change = await orm_get_game(session, int(game_id))
    game_repair.game_for_change = game_for_change
    await callback.answer()
    await callback.message.bot.edit_message_media(chat_id=callback.message.chat.id,message_id=callback.message.message_id,
                                                  media=game_repair.media,reply_markup=game_kb,
    )
    await state.update_data(name=game_repair.game_for_change.name)
    await state.update_data(description=game_repair.game_for_change.description)
    await state.update_data(image=game_repair.game_for_change.image)
    await state.update_data(food=game_repair.game_for_change.food_id)


    await state.set_state(game_repair.change)


@admin_router.callback_query(game_repair.change, F.data.startswith("ch_name"))
async def cgame_name(callback: types.CallbackQuery, state: FSMContext ):
    await callback.answer()
    last = await callback.message.bot.edit_message_caption(chat_id=callback.message.chat.id,message_id=callback.message.message_id
                                                           ,caption='–ö–∞–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—Å —É—Å—Ç—Ä–æ–∏—Ç?',
                                  )
    await state.set_state(game_repair.name)
    GameDev.last_game_id2 = last.message_id


@admin_router.message(game_repair.name, F.text)
async def ugame_name(message: types.Message,state: FSMContext, ):
    await state.update_data(name=message.text)
    await message.delete()
    last = await message.bot.edit_message_caption(chat_id=message.chat.id,message_id=GameDev.last_game_id2,caption=
    '–•–æ—Ç–∏—Ç–µ –µ—â–µ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?',
                                  reply_markup=game_kb)
    game_repair.ch_ch = True
    await state.set_state(game_repair.change)
    GameDev.last_game_id2 = last.message_id



@admin_router.callback_query(game_repair.change, F.data.startswith("ch_description"))
async def cgame_destriction(callback: types.CallbackQuery, state: FSMContext,):
    await callback.answer()
    last = await callback.message.bot.edit_message_caption(chat_id=callback.message.chat.id,
                                                           message_id=callback.message.message_id
                                                           , caption='–©–∞ –∑–∞–º–∞–∂—É, —á–µ –ø–∏—Å–∞—Ç—å —Ç–æ?',
                                  )
    await state.set_state(game_repair.description)
    GameDev.last_game_id2 = last.message_id


@admin_router.message(game_repair.description, F.text)
async def upgame_destriction(message: types.Message, state: FSMContext,):
    desc = f'<i>{message.text}</i>'
    await state.update_data(description=desc)
    await message.delete()
    last = await message.bot.edit_message_caption(chat_id=message.chat.id,message_id=GameDev.last_game_id2,
                                                  caption='–•–æ—Ç–∏—Ç–µ –µ—â–µ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?',
                                  reply_markup=game_kb)
    game_repair.ch_ch = True
    await state.set_state(game_repair.change)
    GameDev.last_game_id2 = last.message_id



@admin_router.callback_query(game_repair.change, F.data.startswith("ch_food"))
async def cgame_food(callback: types.CallbackQuery, session:AsyncSession,state: FSMContext, ):
    await callback.answer()
    food = await orm_get_food(session)
    btns = {category.classification: str(category.id) for category in food}
    last = await callback.message.bot.edit_message_caption(chat_id=callback.message.chat.id,
                                                           message_id=callback.message.message_id
                                                           , caption='–•–º –¥—É–º–∞—é —á—Ç–æ-—Ç–æ –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ?', reply_markup=get_callback_btns(btns=btns))
    await state.set_state(game_repair.food)
    GameDev.last_game_id2 = last.message_id


@admin_router.callback_query(game_repair.food, )
async def ugame_food(callback: types.CallbackQuery, state: FSMContext,):
    await callback.answer()
    await state.update_data(food=callback.data)
    last = await callback.message.bot.edit_message_caption(chat_id=callback.message.chat.id, message_id=callback.message.message_id,
                                                  caption='–•–æ—Ç–∏—Ç–µ –µ—â–µ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?',
                                  reply_markup=game_kb)
    game_repair.ch_ch = True
    await state.set_state(game_repair.change)
    GameDev.last_game_id2 = last.message_id




@admin_router.callback_query(game_repair.change, F.data.startswith("ch_image"))
async def callback_image(callback: types.CallbackQuery, state: FSMContext, ):
    await callback.answer()
    last = await callback.message.bot.edit_message_caption(chat_id=callback.message.chat.id,
                                                           message_id=callback.message.message_id
                                                           , caption=f'–ú–æ–∂–Ω–æ —è –±—É–¥—É –Ω–∞ —Ñ–æ—Ç–∫–µ? –ù—É –ø–æ–∂–∞–ª—É–π—Å—Ç–∞‚ù§Ô∏è',
                                  )
    await state.set_state(game_repair.image)
    GameDev.last_game_id2 = last.message_id


@admin_router.message(game_repair.image, F.photo)
async def update_image(message: types.Message, state: FSMContext,):
    await state.update_data(image=message.photo[-1].file_id)
    await message.delete()
    last = await message.bot.edit_message_caption(chat_id=message.chat.id,
                                                           message_id=GameDev.last_game_id2,
                                                           caption='–•–æ—Ç–∏—Ç–µ –µ—â–µ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?',
                                  reply_markup=game_kb)
    game_repair.ch_ch = True
    await state.set_state(game_repair.change)
    GameDev.last_game_id2 = last.message_id


@admin_router.callback_query(game_repair.change, F.data.startswith("home"))
async def callback_image(callback: types.CallbackQuery, state: FSMContext,  session: AsyncSession):
    data = await state.get_data()
    if game_repair.ch_ch == False:
        await callback.answer()
        media = types.InputMediaPhoto(media=os.getenv('zaebis'),
                                      caption='–î–∞–π-–∫–∞ –≤ —à—Ç–∞–Ω–∏—à–∫–∏ —Ç–≤–æ–∏ –∑–∞–ª–µ–∑—É', )
        tr = await callback.message.bot.edit_message_media(chat_id=callback.message.chat.id,message_id=callback.message.message_id,
                                                      media=media, )
        await asyncio.sleep(0.7)
        await callback.message.bot.delete_message(chat_id=callback.message.chat.id, message_id=tr.message_id,)

        await callback.message.answer_photo(photo=os.getenv('big_pansil'),caption='–∫—Ö–º. –ª—É—á—à–µ –¥–æ–º–æ–π', reply_markup=ADMIN_KB)
        await state.clear()
    else:
        await orm_update_game(session, game_repair.game_for_change.id, data)
        await callback.answer('‚ú®—Å—Ç–∞–ª–æ –ø–∏–∑–∂–µ‚ú®')
        medias = types.InputMediaPhoto(media=os.getenv('zaebis'),
                                       caption='–¥–∞, –Ω–µ –ª–µ–≥–∫–∞—è —ç—Ç–æ —Ä–∞–±–æ—Ç–∫–∞')
        sr = await callback.message.bot.edit_message_media(chat_id=callback.message.chat.id,
                                                      message_id=callback.message.message_id,
                                                      media=medias, )
        await asyncio.sleep(1)
        await callback.message.bot.delete_message(chat_id=callback.message.chat.id, message_id=sr.message_id,)

        await callback.message.answer_photo(photo=os.getenv('big_pansil'),caption='–º–æ–∂–Ω–æ –∏ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å', reply_markup=ADMIN_KB)
        await state.clear()
        game_repair.ch_ch = False

    await  state.clear()






#=======================================================================================================================
#========================================= =============================================================================


@admin_router.callback_query(GameDev.preSTART,F.data.startswith('back'))
async def back_game(callback: types.CallbackQuery,session:AsyncSession,  state: FSMContext) -> None:
    global list_game,game_make
    current_state = await state.get_state()
    await callback.answer()
    previous = None
    play_list = await orm_get_games(session)
    btns = {game.name: f'category_{game.id}' for game in play_list}
    for step in GameDev.__all_states__:
        if step.state == current_state:

            await state.set_state(previous)
            media = types.InputMediaPhoto(media=os.getenv('game_home'), caption=f"{GameDev.texts[previous.state]}")
            list_game = await callback.message.edit_media(media=media,
                                          reply_markup=get_callback_btns(btns=btns,
                                                                                sizes=(1,)))
            game_make = await callback.message.answer("–ò–ª–∏ –º–æ–∂–µ—Ç —á—Ç–æ-—Ç–æ –Ω–æ–≤–µ–Ω—å–∫–æ–µ?",
                                                      reply_markup=get_keyboard('–°–û–ó–î–ê–¢–¨'))
            await  state.set_state(GameDev.development)
            GameDev.last_game_id = game_make.message_id
            GameDev.last_game_id2 = list_game.message_id

            return
        previous = step





@admin_router.callback_query(GameDev.preSTART,F.data.startswith('exit'))
async def exit_game(callback: types.CallbackQuery,  state: FSMContext):
    await callback.answer()
    media = types.InputMediaVideo(media=os.getenv('game_home'),
                                  caption="–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–∞—Ö—É–π –∏—Ö, –Ω–∞ —á–µ–º —Ç–µ–ø–µ—Ä—å –∑–∞–ª–∏–ø–Ω–µ–º? –∫—Å—Ç–∞, –∫–∞–∫ —Ç–µ–±–µ?üëÜüòÆ‚Äçüí®",)
    await callback.message.edit_media(media=media)
    await callback.message.answer('–û—Ö—Ö, –ø–æ–¥–∑–∞–µ–±–∞–ª–∞—Å—å —è –º–∞–ª–µ–Ω—å–∫–æ, —Ç—ã –∫–∞–∫?',reply_markup=home_kb)
    await state.clear()
#========================================================================================




@admin_router.message(or_f(StateFilter(GameDev.development), StateFilter(GameDev.name)), F.text.casefold() == "–Ω–∞–∑–∞–¥")
async def back_home(message: types.Message, state: FSMContext) -> None:
    await message.delete()

    lat = await message.answer("–≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è...",)
    if (await state.get_state() == "GameDev:name"):
        await message.bot.delete_message(message.chat.id, GameDev.last_game_id)
    if (await state.get_state() == "GameDev:development"):
        await asyncio.sleep(0.07)
        await message.bot.delete_message(message.chat.id, GameDev.last_game_id)
        await asyncio.sleep(0.07)
        await message.bot.delete_message(message.chat.id, GameDev.last_game_id2)
    await asyncio.sleep(0.3)
    await state.clear()
    await message.bot.delete_message(chat_id=lat.chat.id, message_id=lat.message_id,
                                        )
    await message.answer('–º—ã –¥–æ–º–∞, –≥–ª–∞–≤–∞ü´°', reply_markup=ADMIN_KB)





@admin_router.message(StateFilter(GameDev), F.text.casefold() == "–Ω–∞–∑–∞–¥")
async def back_step(message: types.Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    previous = None
    for step in GameDev.__all_states__:
        if step.state == current_state:
            await state.set_state(previous)
            await message.answer(f"–ú–¥–∞–∞.. –ò–≥—Ä—ã –¥–µ–ª–∞—Ç—å –Ω–µ PR0N —Å–º–æ—Ç—Ä–µ—Ç—å...üòì\n{GameDev.texts[previous.state]}")
            return
        previous = step



@admin_router.message(GameDev.development ,F.text == '–°–û–ó–î–ê–¢–¨')
async def add_GAME(message: types.Message,state: FSMContext):
    await message.delete()
    await message.bot.delete_message(message.chat.id, GameDev.last_game_id)
    aout = await message.answer('–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —É—Å–ª–æ–≤–∏—è...',reply_markup=ReplyKeyboardRemove())
    await asyncio.sleep(0.4)
    await message.bot.delete_message(message.chat.id, aout.message_id)
    await message.bot.delete_message(message.chat.id, GameDev.last_game_id2)
    name = await message.answer("–ö–∞–∫ –±—É–¥–µ—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è –∏–≥—Ä–∞?",
                                        )
    await state.set_state(GameDev.name)
    GameDev.last_game_id = name.message_id


@admin_router.message(GameDev.name, F.text)
async def add_GAME_name(message: types.Message, state: FSMContext):
    await message.delete()
    await state.update_data(name=message.text)
    desc = await message.bot.edit_message_text(chat_id=message.chat.id,message_id=GameDev.last_game_id,
                                               text="–°–∞–º–æ–µ —Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ, –µ—Å–ª–∏ –≤—ã –ø–æ–Ω–∏–º–∞–µ—Ç–µ –æ —á–µ–º —èü§≠üî•\n–¢–µ–ø–µ—Ä—å –∑–∞–π–º–µ–º—Å—è –æ–ø–∏—Å–∞–Ω–∏–µ–º?")
    await state.set_state(GameDev.description)
    GameDev.last_game_id = desc.message_id

@admin_router.message(GameDev.description, F.text)
async def add_GAME_desc(message: types.Message, state: FSMContext):
    text = f'<i>{message.text}</i>'
    await state.update_data(description=text)
    await message.delete()
    photo = await message.bot.edit_message_text(chat_id=message.chat.id, message_id=GameDev.last_game_id,
                                               text="–í–∞—É, –º–Ω–µ –∞–∂ —Å–∞–º–æ–π –∑–∞—Ö–æ—Ç–µ–ª–æ—Å—å –ø–æ–∏–≥—Ä–∞—Ç—å... –î–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞–∫–∏–Ω–µ–º —Ñ–æ—Ç–æ—á–∫—É!")
    await state.set_state(GameDev.image)
    GameDev.last_game_id = photo.message_id



@admin_router.message(GameDev.image, F.photo)
async def add_GAME_image(message: types.Message,session: AsyncSession, state: FSMContext):
    await state.update_data(image=message.photo[-1].file_id)
    await message.delete()
    food = await orm_get_food(session)
    btns = {category.classification: str(category.id) for category in food}
    fod = await message.bot.edit_message_text(chat_id=message.chat.id,message_id=GameDev.last_game_id,
                                               text="–ñ–∞–ª–∫–æ —ç—Ç–æ –Ω–µ —Ç—ã, —è –±—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∞üî•\n–¢–∞–∫, –æ —á–µ–º —ç—Ç–æ –º—ã? –¢–æ—á–Ω–æ –∞ –∫–∞–∫–æ–π —ç—Ç–æ —Ñ—É–¥?",
                         reply_markup=get_callback_btns(
                        btns=btns, sizes=(2,2,2)))
    await state.set_state(GameDev.food_id)
    GameDev.last_game_id = fod.message_id



@admin_router.callback_query(GameDev.food_id)
async def add_GAME_food(callback: types.CallbackQuery, session: AsyncSession, state: FSMContext):
    if int(callback.data) in [category.id for category in await orm_get_food(session)]:
        await callback.answer()
        await state.update_data(food=callback.data)
    else:
        exec = await callback.message.bot.edit_message_text(chat_id=callback.message.chat.id,message_id=GameDev.last_game_id,
                                               text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–æ—Ä–∏—é –∏–∑ –∫–Ω–æ–ø–æ–∫.')
        await callback.answer()
        GameDev.last_game_id = exec.message_id

    data = await state.get_data()
    try:
        await orm_add_game(session, data)
        tryt = await callback.message.bot.edit_message_text(chat_id=callback.message.chat.id, message_id=GameDev.last_game_id,
                                                   text="–û—Ç–ª–∏—á–Ω–æ, +–∏–≥—Ä—É—à–∫–∞ –≤ –∫–æ–ø–∏–ª–∫—É!",)
        await state.clear()
        await asyncio.sleep(1)
        await callback.message.bot.delete_message(chat_id=callback.message.chat.id, message_id=tryt.message_id)
        await callback.message.answer('–ú—ã –¥–æ–º–∞' ,reply_markup=ADMIN_KB)


    except Exception as e:
        scr = await callback.message.bot.edit_message_text(chat_id=callback.message.chat.id, message_id=GameDev.last_game_id,
                                                   text=
            f"–û—à–∏–±–æ—á–∫–∞ –≤—ã—à–ª–∞üò©: \n{str(e)}\n–°–∞–Ω—è –ø–∏–¥–∞—Ä–∞—Å, –æ–ø—è—Ç—å —Ö—É–µ–≤–µ—Ä—Ç–∏—Çü§¨",

        )
        await asyncio.sleep(1)
        await callback.message.bot.delete_message(chat_id=callback.message.chat.id, message_id=scr.message_id)
        await callback.message.answer('–ù—É –∏ —Ö—É–π —Å –Ω–∏–º',reply_markup=ADMIN_KB,)

    await state.clear()




#=========================================------____FOOD_CLASS____-------==============================================
#=========================================------____FOOD_CLASS____-------==============================================


class Foodcort(StatesGroup):
    change = State()
    ch_change = State()
    ch_delete = State()
    ch_name = State()
    ch_description = State()
    foodcort = State()
    name = State()
    description = State()

    ch_ch = False
    fod_for_change = None

    last_food = None
    last_food2 = None
    other = None

@admin_router.message(F.text == 'FOOD')
async def admin_fooding(message: types.Message, session: AsyncSession, state: FSMContext):
    food_list = await orm_get_food(session)
    btns = {food.classification : f'category_{food.id}' for food in food_list}
    fos = await message.answer("–ß—Ç–æ-–∂ –≤–æ—Ç —Å–ø–∏—Å–æ–∫ —Å–º–∞—á–Ω–æ–≥–æ food'a", reply_markup=get_callback_btns(btns=btns,
                                                                                sizes=(1,)))

    fods = await message.answer("–ß–µ –¥–µ–ª–∞—Ç—å –±—É–¥–µ–º?",reply_markup=get_keyboard('–°–û–ó–î–ê–¢–¨',
                                                                   '–ò–ó–ú–ï–ù–ò–¢–¨',
                                                                   '–£–î–ê–õ–ò–¢–¨',
                                                                    '–ù–ê –•–ê–¢–£',
                                                        sizes=(1,1,1)))
    await state.set_state(Foodcort.foodcort)
    Foodcort.last_food = fos.message_id
    Foodcort.last_food2 = fods.message_id





@admin_router.message(StateFilter(Foodcort.foodcort),F.text == '–ù–ê –•–ê–¢–£')
async def add_FOOD(message: types.Message,state: FSMContext):
    st = await message.bot.edit_message_text(chat_id=message.chat.id, message_id=Foodcort.last_food,
                                        text="–ò–¥—É –¥–æ–º–æ–π...")
    await message.delete()
    await asyncio.sleep(1)
    await st.delete()
    await message.answer('–º—ã –¥–æ–º–∞', reply_markup=ADMIN_KB)

    await message.bot.delete_message(chat_id=message.chat.id, message_id=Foodcort.last_food2)
    await state.set_state(Foodcort.name)



@admin_router.callback_query(Foodcort.ch_delete)
async def delete_new(callback: types.CallbackQuery, session: AsyncSession, state: FSMContext):
    fod_id = callback.data.split("_")[-1]
    await orm_delete_food(session, int(fod_id))
    await callback.answer('–∞ –Ω—É-–∫–∞ –Ω–∞—Ö—É–π –æ—Ç—Å—é–¥–∞.',)
    await callback.message.bot.delete_message(chat_id=callback.message.chat.id, message_id=Foodcort.other)
    await callback.message.answer('–ß—Ç–æ-–∂, –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∏ –∏ —Ö–≤–∞—Ç–∏—Ç', reply_markup=ADMIN_KB)
    await  state.clear()

@admin_router.message(Foodcort.foodcort, F.text == '–£–î–ê–õ–ò–¢–¨')
async def dl_FOOD(message: types.Message, session: AsyncSession,state: FSMContext):
    food_list = await orm_get_food(session)
    btns = {food.classification: f'category_{food.id}' for food in food_list}
    other = await message.bot.edit_message_text(chat_id=message.chat.id,message_id=Foodcort.last_food,
                                                text="üëÜ–í—ã–±–µ—Ä–∏—Ç–µ food, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ delete-nahuiüëÜ",
                                                reply_markup=get_callback_btns(btns=btns,
                                                                                sizes=(1,)))
    await message.delete()
    Foodcort.other = other.message_id
    await message.bot.delete_message(chat_id=message.chat.id, message_id=Foodcort.last_food2)
    await state.set_state(Foodcort.ch_delete)



@admin_router.message(Foodcort.foodcort, F.text == '–ò–ó–ú–ï–ù–ò–¢–¨')
async def CH_FOOD(message: types.Message, session: AsyncSession,state: FSMContext):
    food_list = await orm_get_food(session)
    btns = {food.classification: f'category_{food.id}' for food in food_list}
    ch_fod = await message.bot.edit_message_text(chat_id=message.chat.id,message_id=Foodcort.last_food,
                                                 text="üëÜ–í—ã–±–µ—Ä–∏—Ç–µ food, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Ç—è–Ω—É—Ç—åüëÜ",
                                                 reply_markup=get_callback_btns(btns=btns,
                                                                                sizes=(1,)))
    await message.delete()
    await message.bot.delete_message(chat_id=message.chat.id, message_id=Foodcort.last_food2)
    await state.set_state(Foodcort.change)
    Foodcort.last_food =ch_fod.message_id

@admin_router.callback_query(Foodcort.change)
async def ch_food(callback: types.CallbackQuery, session: AsyncSession, state: FSMContext):
    food_id = callback.data.split("_")[-1]
    fod_for_change = await orm_get_one_food(session, int(food_id))
    Foodcort.fod_for_change = fod_for_change
    await callback.answer()
    set = await callback.bot.edit_message_text(chat_id=callback.message.chat.id,message_id=Foodcort.last_food,text=
        "–†–µ–¥–∞–∫—Ç–æ—Ä –ú–∏—è –≤ –ø—É—Ç–∏! –°–∫–∞–∂–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å?üë©‚Äçüé®",
        reply_markup=get_callback_btns(btns={'–ù–∞–∑–≤–∞–Ω–∏–µ':'name',
                                             '–û–ø–∏—Å–∞–Ω–∏–µ':'description',
                                             '–ù–ê –•–ê–¢–£': 'home'
                                             },
                                       sizes=(2,)))

    await state.update_data(name=Foodcort.fod_for_change.classification)
    await state.update_data(description=Foodcort.fod_for_change.description)
    await state.set_state(Foodcort.ch_change)
    Foodcort.last_food = set.message_id



@admin_router.callback_query(Foodcort.ch_change, F.data.startswith('name'))
async def sfood(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    nam =await callback.bot.edit_message_text(chat_id=callback.message.chat.id,message_id=Foodcort.last_food,
                                         text='–ö–∞–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—Å —É—Å—Ç—Ä–æ–∏—Ç?',
                                  )
    await state.set_state(Foodcort.ch_name)
    Foodcort.last_food = nam.message_id

@admin_router.message(Foodcort.ch_name, F.text)
async def update_name(message: types.Message, state: FSMContext, ):
    await state.update_data(name=message.text)
    await message.delete()
    form = await message.bot.edit_message_text(chat_id=message.chat.id,message_id=Foodcort.last_food,
                                        text='–•–æ—Ç–∏—Ç–µ –µ—â–µ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?',
                         reply_markup=get_callback_btns(btns={'–ù–∞–∑–≤–∞–Ω–∏–µ':'name',
                                                              '–û–ø–∏—Å–∞–Ω–∏–µ':'description',
                                                              '–ù–ê –•–ê–¢–£':'home'}
                                                    ))
    Foodcort.ch_ch = True
    await state.set_state(Foodcort.ch_change)
    Foodcort.last_food = form.message_id



@admin_router.callback_query(Foodcort.ch_change, F.data.startswith('description'))
async def DOUBLE(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    scr = await callback.bot.edit_message_text(chat_id=callback.message.chat.id,message_id=Foodcort.last_food,
                                               text='–≠—Ö—Ö, –≤—Ä–µ–º—è –≤ –ø—É—Å—Ç—É—é..',
                                  )
    await state.set_state(Foodcort.ch_description)
    Foodcort.last_food = scr.message_id

@admin_router.message(Foodcort.ch_description, F.text)
async def update_description(message: types.Message, state: FSMContext, ):
    await state.update_data(description=message.text)
    awe = await message.bot.edit_message_text(chat_id=message.chat.id,message_id=Foodcort.last_food,
                                        text='–•–æ—Ç–∏—Ç–µ –µ—â–µ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?',
                         reply_markup=get_callback_btns(btns={'–ù–∞–∑–≤–∞–Ω–∏–µ': 'name',
                                                              '–û–ø–∏—Å–∞–Ω–∏–µ': 'description',
                                                              '–ù–ê –•–ê–¢–£': 'home'}
                                                        ))
    await message.delete()
    Foodcort.ch_ch = True
    await state.set_state(Foodcort.ch_change)
    Foodcort.last_food = awe.message_id


@admin_router.callback_query(Foodcort.ch_change, F.data.startswith('home'))
async def END_CH(callback: types.CallbackQuery,  session: AsyncSession,state: FSMContext):
    data = await state.get_data()
    if Foodcort.ch_ch == False:
        await callback.answer()
        tr = await callback.bot.edit_message_text(chat_id=callback.message.chat.id,message_id=Foodcort.last_food,
                                             text='–î–∞ –≤—Å–µ –∏ —Ç–∞–∫ –ø–∏–∑–¥–∞—Ç–µ–Ω—å–∫–æ')
        await asyncio.sleep(1)
        sr = await callback.bot.edit_message_text(chat_id=callback.message.chat.id, message_id=tr.message_id,
                                             text='–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ...')
        await asyncio.sleep(1)
        await callback.message.bot.delete_message(chat_id=callback.message.chat.id, message_id=sr.message_id)
        await callback.message.answer('*swallow*ü•µüîû*swallow*', reply_markup=ADMIN_KB)

    else:
        await orm_update_food(session, Foodcort.fod_for_change.id, data)
        await callback.answer('‚ú®—Å—Ç–∞–ª–æ –ø–∏–∑–∂–µ‚ú®')
        tr = await callback.bot.edit_message_text(chat_id=callback.message.chat.id,message_id=Foodcort.last_food,
                                             text='–¥–∞, –Ω–µ –ª–µ–≥–∫–∞—è —ç—Ç–æ —Ä–∞–±–æ—Ç–∫–∞',)
        await asyncio.sleep(0.8)
        sr = await callback.bot.edit_message_text(chat_id=callback.message.chat.id, message_id=tr.message_id,
                                                  text='–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ...')
        await asyncio.sleep(1)
        await callback.message.bot.delete_message(chat_id=callback.message.chat.id, message_id=sr.message_id)
        await callback.message.answer('*swallow*ü•µüîû*swallow*', reply_markup=ADMIN_KB)
        Foodcort.ch_ch = False

    await  state.clear()
    Foodcort.last_food = None





@admin_router.message(Foodcort.foodcort ,F.text == '–°–û–ó–î–ê–¢–¨')
async def add_FOOD(message: types.Message,state: FSMContext):
    awe = await message.bot.edit_message_text(chat_id=message.chat.id,message_id=Foodcort.last_food,
                                        text="–ö–∞–∫ –±—É–¥–µ—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è food?", )
    await message.delete()
    await message.bot.delete_message(chat_id=message.chat.id,message_id=Foodcort.last_food2)
    await state.set_state(Foodcort.name)
    Foodcort.last_food = awe.message_id

@admin_router.message(Foodcort.name, F.text)
async def add_FOOD_name(message: types.Message, session:AsyncSession, state: FSMContext):
    categories = await orm_get_food(session)
    if message.text in {category.classification: str(category.id) for category in categories}:
        asd = await message.bot.edit_message_text(chat_id=message.chat.id,message_id=Foodcort.last_food,
                                            text="–û–π, —è –Ω–∞—à–ª–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, —ç—Ç–æ —Ç–æ—á–Ω–æ —Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ?üßê")
        Foodcort.last_food = asd.message_id
        await message.delete()
    else:
        await state.update_data(name=message.text)
        auf = await message.bot.edit_message_text(chat_id=message.chat.id,message_id=Foodcort.last_food,
                                            text="–ß—Ç–æ –º—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–º –Ω–∞ —Å–≤–µ—Ç?")
        await message.delete()
        await state.set_state(Foodcort.description)
        Foodcort.last_food = auf.message_id

@admin_router.message(Foodcort.description, F.text)
async def add_FOOD_name(message: types.Message, session:AsyncSession, state: FSMContext):
    await state.update_data(description=message.text)
    data = await state.get_data()
    try:
        await orm_create_food(session, data)
        TR = await message.bot.edit_message_text(chat_id=message.chat.id,message_id=Foodcort.last_food,
                                            text="–û–±—Ä–∞–±–æ—Ç–∫–∞...", )
        await message.delete()
        await asyncio.sleep(0.7)
        qw =await message.bot.edit_message_text(chat_id=message.chat.id,message_id=TR.message_id,
                                            text='–ó–∞–≥—Ä—É–∑–∫–∞...')
        await asyncio.sleep(0.5)
        strr = await message.bot.edit_message_text(chat_id=message.chat.id,message_id=qw.message_id,text='–ì–ª—É–±–æ–∫–∏–π –º–∏–Ω–µ—Ç...')
        await asyncio.sleep(0.6)
        await message.bot.delete_message(chat_id=message.chat.id,message_id=strr.message_id)
        await message.answer('–Ø –∑–∞–∫–æ–Ω—á–∏–ª–∞!',reply_markup=ADMIN_KB)
        await state.clear()


    except Exception as e:
        TR = await  message.bot.edit_message_text(chat_id=message.chat.id,message_id=Foodcort.last_food,
                                            text=
            f"–û—à–∏–±–æ—á–∫–∞ –≤—ã—à–ª–∞üò©: \n{str(e)}\n–°–∞–Ω—è –ø–∏–¥–∞—Ä–∞—Å, –æ–ø—è—Ç—å —Ö—É–µ–≤–µ—Ä—Ç–∏—Çü§¨",
            )
        await message.delete()
        await message.bot.delete_message(chat_id=message.chat.id,message_id=TR.message_id)
        await message.answer('–ù—É –¥–∞ –∏ —Ö—É–π —Å –Ω–∏–º, –ø–æ—à–ª–∏ –ø–æ –±–∞–±–∞–º', reply_markup=ADMIN_KB)

    await state.clear()

